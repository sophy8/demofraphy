{"version":3,"sources":["webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/map/SmallMap.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/map/ZoomControl.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/responsive/ResponsiveDefaults.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACiD;AACS;AACb;AACmC;AACjC;AACA;AACwB;AACtB;AACF;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,sBAAsB;AAC/B,SAAS,wBAAwB;AACjC;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+EAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,yDAAS;AAC3D;AACA;AACA,0CAA0C,kEAAS;AACnD;AACA;AACA;AACA;AACA,yBAAyB,+DAAK,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA,mCAAmC,qDAAI;AACvC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,eAAe,mCAAmC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iCAAiC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sCAAsC;AACrD;AACA;AACA;AACA,wBAAwB,kEAAuB;AAC/C;AACA;AACA;AACA;AACA,iDAAiD,aAAa;AAC9D;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA,2CAA2C,kEAAa;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,kDAAkD;AACvF,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,gBAAgB,yDAAc,mBAAmB,wDAAa;AAC9D,2DAA2D,SAAS;AACpE;AACA,wBAAwB,yDAAc,YAAY,yDAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,yDAAS;AACS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,oC;;;;;;;;;;;;AC5OA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACiD;AACG;AACoB;AACQ;AAC3B;AACe;AACjB;AACJ;AACwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,yBAAyB;AAClC,SAAS,2BAA2B;AACpC;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA,kCAAkC,+EAAiB;AACnD,2CAA2C,4DAAM;AACjD;AACA;AACA,2BAA2B,mEAAO;AAClC;AACA;AACA;AACA,uCAAuC,yDAAS;AAChD;AACA,uBAAuB,mEAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,uCAAuC,4DAAM;AAC7C;AACA;AACA;AACA;AACA;AACA,4CAA4C,4DAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mEAAO;AAC5C,+BAA+B,mEAAO;AACtC,oCAAoC,mEAAO;AAC3C,gCAAgC,mEAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mEAAO;AAC7C;AACA,gCAAgC,mEAAO;AACvC;AACA,qCAAqC,mEAAO;AAC5C;AACA,iCAAiC,mEAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sCAAsC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA,uCAAuC,kEAAa;AACpD;AACA;AACA,+DAA+D,mCAAmC,EAAE;AACpG,gBAAgB,oFAAc;AAC9B;AACA,4BAA4B,6DAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6DAAQ;AACzC;AACA;AACA,iCAAiC,6DAAQ;AACzC;AACA;AACA;AACA,iBAAiB;AACjB,8DAA8D,kCAAkC,EAAE;AAClG;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA;AACA,mBAAmB,gFAAgB;AACnC;AACA;AACA,CAAC,CAAC,yDAAS;AACY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uC;;;;;;;;;;;;ACzSA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAC8D;AACE;AACA;AACc;AACnC;AACE;AACQ;AACM;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kCAAkC,sEAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kCAAkC,wEAAa;AAC/C;AACA;AACA;AACA;AACA,kCAAkC,sFAAoB;AACtD;AACA;AACA;AACA;AACA,kCAAkC,6DAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,kCAAkC,mEAAW;AAC7C;AACA;AACA;AACA;AACA,kCAAkC,mDAAK;AACvC;AACA;AACA;AACA;AACA;AACA,kCAAkC,qDAAM;AACxC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kCAAkC,wEAAa;AAC/C;AACA;AACA;AACA;AACA,kCAAkC,sFAAoB;AACtD;AACA;AACA;AACA;AACA,kCAAkC,6DAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,kCAAkC,mEAAW;AAC7C;AACA;AACA;AACA;AACA,kCAAkC,mDAAK;AACvC;AACA;AACA;AACA;AACA;AACA,kCAAkC,qDAAM;AACxC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kCAAkC,qDAAM;AACxC;AACA;AACA;AACA;AACA,kCAAkC,mEAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;AACF,8C","file":"responsivedefaults.js","sourcesContent":["/**\r\n * A module for the mini-map control.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar SmallMap = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SmallMap, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SmallMap() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A target map.\r\n         *\r\n         * @type {MutableValueDisposer<MapChart>}\r\n         */\r\n        _this._chart = new MutableValueDisposer();\r\n        _this.className = \"SmallMap\";\r\n        // Set defaults\r\n        _this.align = \"left\";\r\n        _this.valign = \"bottom\";\r\n        _this.percentHeight = 20;\r\n        _this.percentWidth = 20;\r\n        _this.margin(5, 5, 5, 5);\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Set background defailts\r\n        _this.background.fillOpacity = 0.9;\r\n        _this.background.fill = interfaceColors.getFor(\"background\");\r\n        // Set up events\r\n        _this.events.on(\"hit\", _this.moveToPosition, _this, false);\r\n        _this.events.on(\"maxsizechanged\", _this.updateMapSize, _this, false);\r\n        // Create a container\r\n        _this.seriesContainer = _this.createChild(Container);\r\n        _this.seriesContainer.shouldClone = false;\r\n        // Create an outline rectangle\r\n        var rectangle = _this.createChild(Rectangle);\r\n        rectangle.shouldClone = false;\r\n        rectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n        rectangle.strokeWidth = 1;\r\n        rectangle.strokeOpacity = 0.5;\r\n        rectangle.fill = color(); //\"none\";\r\n        rectangle.verticalCenter = \"middle\";\r\n        rectangle.horizontalCenter = \"middle\";\r\n        rectangle.isMeasured = false;\r\n        _this.rectangle = rectangle;\r\n        _this._disposers.push(_this._chart);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(SmallMap.prototype, \"series\", {\r\n        /**\r\n         * A list of map series used to draw the mini-map.\r\n         *\r\n         * @readonly\r\n         * @return {List<MapSeries>} Series\r\n         */\r\n        get: function () {\r\n            if (!this._series) {\r\n                this._series = new List();\r\n                this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n                this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n            }\r\n            return this._series;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Decorates a new series when they are pushed into a `series` list.\r\n     *\r\n     * @param {IListEvents<MapSeries>[\"inserted\"]} event Event\r\n     */\r\n    SmallMap.prototype.handleSeriesAdded = function (event) {\r\n        var series = event.newValue;\r\n        if (this.chart.series.contains(series)) {\r\n            var newSeries = series.clone();\r\n            this._series.removeValue(series);\r\n            this._series.push(newSeries);\r\n            series = newSeries;\r\n            this.chart.dataUsers.push(newSeries);\r\n        }\r\n        series.chart = this.chart;\r\n        series.parent = this.seriesContainer;\r\n        series.interactionsEnabled = false;\r\n    };\r\n    /**\r\n     * Cleans up after series are removed from Scrollbar.\r\n     *\r\n     * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n     */\r\n    SmallMap.prototype.handleSeriesRemoved = function (event) {\r\n        //let sourceSeries: MapSeries = event.oldValue;\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * Moves main map pan position after click on the small map.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n     */\r\n    SmallMap.prototype.moveToPosition = function (event) {\r\n        var svgPoint = event.svgPoint;\r\n        var rectPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\r\n        var zoomLevel = this.chart.zoomLevel;\r\n        var scale = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n        var x = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\r\n        var y = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\r\n        var geoPoint = this.chart.svgPointToGeo({ x: x, y: y });\r\n        this.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n    };\r\n    Object.defineProperty(SmallMap.prototype, \"chart\", {\r\n        /**\r\n         * @return {MapChart} Chart/map\r\n         */\r\n        get: function () {\r\n            return this._chart.get();\r\n        },\r\n        /**\r\n         * A chart/map that this control is meant for.\r\n         *\r\n         * @param {MapChart}  chart  Chart/map\r\n         */\r\n        set: function (chart) {\r\n            if (this.chart != chart) {\r\n                this._chart.set(chart, new MultiDisposer([\r\n                    //chart.events.on(\"zoomlevelchanged\", this.updateRectangle, this, false),\r\n                    chart.events.on(\"mappositionchanged\", this.updateRectangle, this, false),\r\n                    chart.events.on(\"scaleratiochanged\", this.updateMapSize, this, false)\r\n                ]));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates the viewport recangle as per current map zoom/pan position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SmallMap.prototype.updateRectangle = function () {\r\n        var chart = this.chart;\r\n        var zoomLevel = chart.zoomLevel;\r\n        var rectangle = this.rectangle;\r\n        rectangle.width = this.pixelWidth / zoomLevel;\r\n        rectangle.height = this.pixelHeight / zoomLevel;\r\n        var scale = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n        var seriesContainer = chart.seriesContainer;\r\n        rectangle.x = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\r\n        rectangle.y = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\r\n        rectangle.validate();\r\n    };\r\n    /**\r\n     * Update map size so that internal elements can redraw themselves after\r\n     * the size of the small map changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SmallMap.prototype.updateMapSize = function () {\r\n        if (this.chart) {\r\n            this.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n            this.updateRectangle();\r\n            this.afterDraw();\r\n        }\r\n    };\r\n    /**\r\n     * Update elements after drawing the small map.\r\n     */\r\n    SmallMap.prototype.afterDraw = function () {\r\n        _super.prototype.afterDraw.call(this);\r\n        this.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n        this.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    SmallMap.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up series\r\n            if ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n                for (var i = 0, len = config.series.length; i < len; i++) {\r\n                    var series = config.series[i];\r\n                    if ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n                        config.series[i] = this.map.getKey(series);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return SmallMap;\r\n}(Container));\r\nexport { SmallMap };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n//# sourceMappingURL=SmallMap.js.map","/**\r\n * Zoom control module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar ZoomControl = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ZoomControl, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ZoomControl() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A target map.\r\n         *\r\n         * @type {MutableValueDisposer<MapChart>}\r\n         */\r\n        _this._chart = new MutableValueDisposer();\r\n        _this.className = \"ZoomControl\";\r\n        _this.align = \"right\";\r\n        _this.valign = \"bottom\";\r\n        _this.layout = \"vertical\";\r\n        _this.padding(5, 5, 5, 5);\r\n        var interfaceColors = new InterfaceColorSet();\r\n        var plusButton = _this.createChild(Button);\r\n        plusButton.shouldClone = false;\r\n        plusButton.label.text = \"+\";\r\n        plusButton.width = percent(100);\r\n        plusButton.padding(5, 5, 5, 5);\r\n        //plusButton.fontFamily = \"Verdana\";\r\n        _this.plusButton = plusButton;\r\n        var slider = _this.createChild(Container);\r\n        slider.shouldClone = false;\r\n        slider.width = percent(100);\r\n        slider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        slider.background.fillOpacity = 0.05;\r\n        slider.background.events.on(\"hit\", _this.handleBackgroundClick, _this, false);\r\n        slider.events.on(\"sizechanged\", _this.updateThumbSize, _this, false);\r\n        _this.slider = slider;\r\n        var thumb = slider.createChild(Button);\r\n        thumb.shouldClone = false;\r\n        thumb.padding(0, 0, 0, 0);\r\n        thumb.draggable = true;\r\n        thumb.events.on(\"drag\", _this.handleThumbDrag, _this, false);\r\n        _this.thumb = thumb;\r\n        var minusButton = _this.createChild(Button);\r\n        minusButton.shouldClone = false;\r\n        minusButton.label.text = \"-\";\r\n        minusButton.padding(5, 5, 5, 5);\r\n        //minusButton.fontFamily = \"Verdana\";\r\n        _this.minusButton = minusButton;\r\n        // Set roles\r\n        _this.thumb.role = \"slider\";\r\n        _this.thumb.readerLive = \"polite\";\r\n        // Set reader text\r\n        _this.thumb.readerTitle = _this.language.translate(\"Use arrow keys to zoom in and out\");\r\n        _this.minusButton.readerTitle = _this.language.translate(\"Press ENTER to zoom in\");\r\n        _this.plusButton.readerTitle = _this.language.translate(\"Press ENTER to zoom out\");\r\n        _this.applyTheme();\r\n        _this.events.on(\"propertychanged\", function (event) {\r\n            if (event.property == \"layout\") {\r\n                _this.fixLayout();\r\n            }\r\n        }, undefined, false);\r\n        _this._disposers.push(_this._chart);\r\n        _this.fixLayout();\r\n        return _this;\r\n    }\r\n    ZoomControl.prototype.fixLayout = function () {\r\n        if (this.layout == \"vertical\") {\r\n            this.width = 40;\r\n            this.height = undefined;\r\n            this.minusButton.width = percent(100);\r\n            this.thumb.width = percent(100);\r\n            this.plusButton.width = percent(100);\r\n            this.slider.width = percent(100);\r\n            this.minusButton.marginTop = 1;\r\n            this.plusButton.marginBottom = 2;\r\n            this.slider.height = 0;\r\n            this.minusButton.toFront();\r\n            this.plusButton.toBack();\r\n            this.thumb.minX = 0;\r\n            this.thumb.maxX = 0;\r\n            this.thumb.minY = 0;\r\n        }\r\n        else if (this.layout == \"horizontal\") {\r\n            this.thumb.minX = 0;\r\n            this.thumb.minY = 0;\r\n            this.thumb.maxY = 0;\r\n            this.height = 40;\r\n            this.width = undefined;\r\n            this.minusButton.height = percent(100);\r\n            this.minusButton.width = 30;\r\n            this.thumb.height = percent(100);\r\n            this.thumb.width = undefined;\r\n            this.plusButton.height = percent(100);\r\n            this.plusButton.width = 30;\r\n            this.slider.height = percent(100);\r\n            this.slider.width = 0;\r\n            this.minusButton.marginLeft = 2;\r\n            this.plusButton.marginRight = 2;\r\n            this.minusButton.toBack();\r\n            this.plusButton.toFront();\r\n        }\r\n    };\r\n    /**\r\n     * Handles zoom operation after clicking on the slider background.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n     */\r\n    ZoomControl.prototype.handleBackgroundClick = function (event) {\r\n        var sprite = event.target;\r\n        var y = event.spritePoint.y;\r\n        var chart = this.chart;\r\n        var maxPower = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n        var minPower = Math.log(chart.minZoomLevel) / Math.LN2;\r\n        var power = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n        var zoomLevel = Math.pow(2, power);\r\n        chart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n    };\r\n    Object.defineProperty(ZoomControl.prototype, \"chart\", {\r\n        /**\r\n         * @return {MapChart} Map/chart\r\n         */\r\n        get: function () {\r\n            return this._chart.get();\r\n        },\r\n        /**\r\n         * A main chart/map that this zoom control is for.\r\n         *\r\n         * @param {MapChart}  chart  Map/chart\r\n         */\r\n        set: function (chart) {\r\n            var _this = this;\r\n            this._chart.set(chart, new MultiDisposer([\r\n                chart.events.on(\"maxsizechanged\", this.updateThumbSize, this, false),\r\n                chart.events.on(\"zoomlevelchanged\", this.updateThumb, this, false),\r\n                this.minusButton.events.on(\"hit\", function () { chart.zoomOut(chart.zoomGeoPoint); }, chart, false),\r\n                getInteraction().body.events.on(\"keyup\", function (ev) {\r\n                    if (_this.topParent.hasFocused) {\r\n                        if (keyboard.isKey(ev.event, \"enter\")) {\r\n                            if (_this.minusButton.isFocused) {\r\n                                chart.zoomOut();\r\n                            }\r\n                            else if (_this.plusButton.isFocused) {\r\n                                chart.zoomIn();\r\n                            }\r\n                        }\r\n                        else if (keyboard.isKey(ev.event, \"plus\")) {\r\n                            chart.zoomIn();\r\n                        }\r\n                        else if (keyboard.isKey(ev.event, \"minus\")) {\r\n                            chart.zoomOut();\r\n                        }\r\n                    }\r\n                }, chart),\r\n                this.plusButton.events.on(\"hit\", function () { chart.zoomIn(chart.zoomGeoPoint); }, chart, false)\r\n            ]));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates the slider's thumb size based on the available zoom space.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ZoomControl.prototype.updateThumbSize = function () {\r\n        var chart = this.chart;\r\n        if (chart) {\r\n            var slider = this.slider;\r\n            var thumb = this.thumb;\r\n            if (this.layout == \"vertical\") {\r\n                thumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n                thumb.height = slider.pixelHeight / this.stepCount;\r\n                thumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n                if (thumb.pixelHeight <= 1) {\r\n                    thumb.visible = false;\r\n                }\r\n                else {\r\n                    thumb.visible = true;\r\n                }\r\n            }\r\n            else {\r\n                thumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n                thumb.width = slider.pixelWidth / this.stepCount;\r\n                thumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n                if (thumb.pixelWidth <= 1) {\r\n                    thumb.visible = false;\r\n                }\r\n                else {\r\n                    thumb.visible = true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates thumb according to current zoom position from map.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ZoomControl.prototype.updateThumb = function () {\r\n        var slider = this.slider;\r\n        var chart = this.chart;\r\n        var thumb = this.thumb;\r\n        if (!thumb.isDown) {\r\n            var step = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\r\n            if (this.layout == \"vertical\") {\r\n                thumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\r\n            }\r\n            else {\r\n                thumb.x = slider.pixelWidth * step / this.stepCount;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Zooms the actual map when slider position changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ZoomControl.prototype.handleThumbDrag = function () {\r\n        var slider = this.slider;\r\n        var chart = this.chart;\r\n        var thumb = this.thumb;\r\n        var step;\r\n        var minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n        if (this.layout == \"vertical\") {\r\n            step = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\r\n        }\r\n        else {\r\n            step = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n        }\r\n        step = minStep + step;\r\n        var zoomLevel = Math.pow(2, step);\r\n        chart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n    };\r\n    Object.defineProperty(ZoomControl.prototype, \"stepCount\", {\r\n        /**\r\n         * Returns the step countfor the slider grid according to map's min and max\r\n         * zoom level settings.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {number} Step count\r\n         */\r\n        get: function () {\r\n            return Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates a background element for slider control.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {this} Background\r\n     */\r\n    ZoomControl.prototype.createBackground = function () {\r\n        return new RoundedRectangle();\r\n    };\r\n    return ZoomControl;\r\n}(Container));\r\nexport { ZoomControl };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n//# sourceMappingURL=ZoomControl.js.map","/**\r\n * Defines default Responsive rules\r\n * @hidden\r\n */\r\nimport { AxisRenderer } from \"../../charts/axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\r\nimport { AxisRendererCircular } from \"../../charts/axes/AxisRendererCircular\";\r\nimport { Chart } from \"../../charts/Chart\";\r\nimport { Legend } from \"../../charts/Legend\";\r\nimport { SmallMap } from \"../../charts/map/SmallMap\";\r\nimport { ZoomControl } from \"../../charts/map/ZoomControl\";\r\n/**\r\n * ============================================================================\r\n * RULES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Default rules.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Do not create states for objects that do not have any overrides\r\n */\r\nexport default [\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Microcharts and sparklines\r\n     * W<=100 || H<=100\r\n     * @todo\r\n     */\r\n    {\r\n        relevant: function (container) {\r\n            if ((container.pixelWidth <= 100) || (container.pixelHeight <= 100)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        state: function (object, stateId) {\r\n            // Put vertical axis labels inside\r\n            if (object instanceof AxisRenderer) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.minLabelPosition = 1;\r\n                state.properties.maxLabelPosition = 0;\r\n                return state;\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Narrow\r\n     * W<=200\r\n     */\r\n    {\r\n        relevant: function (container) {\r\n            if ((container.pixelWidth <= 200)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        state: function (object, stateId) {\r\n            // Put vertical axis labels inside\r\n            if (object instanceof AxisRendererY) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.inside = true;\r\n                return state;\r\n            }\r\n            if (object instanceof AxisRendererCircular) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.inside = true;\r\n                return state;\r\n            }\r\n            if (object instanceof SmallMap) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.disabled = true;\r\n                return state;\r\n            }\r\n            /*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n                let state = object.states.create(stateId);\r\n                state.properties.height = 0;\r\n                return state;\r\n            }*/\r\n            if (object instanceof ZoomControl) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.layout = \"vertical\";\r\n                return state;\r\n            }\r\n            if (object instanceof Chart) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.marginLeft = 0;\r\n                state.properties.marginRight = 0;\r\n                return state;\r\n            }\r\n            if (object instanceof Legend && (object.position == \"left\" || object.position == \"right\")) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.position = \"bottom\";\r\n                return state;\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Short\r\n     * H<=200\r\n     */\r\n    {\r\n        relevant: function (container) {\r\n            if ((container.pixelHeight <= 200)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        state: function (object, stateId) {\r\n            // Put vertical axis labels inside\r\n            if (object instanceof AxisRendererX) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.inside = true;\r\n                return state;\r\n            }\r\n            if (object instanceof AxisRendererCircular) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.inside = true;\r\n                return state;\r\n            }\r\n            if (object instanceof SmallMap) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.disabled = true;\r\n                return state;\r\n            }\r\n            /*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n                let state = object.states.create(stateId);\r\n                state.properties.width = 100;\r\n                return state;\r\n            }*/\r\n            if (object instanceof ZoomControl) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.layout = \"horizontal\";\r\n                return state;\r\n            }\r\n            if (object instanceof Chart) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.marginTop = 0;\r\n                state.properties.marginBottom = 0;\r\n                return state;\r\n            }\r\n            if (object instanceof Legend && (object.position == \"bottom\" || object.position == \"top\")) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.position = \"right\";\r\n                return state;\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Super-small\r\n     * W<=200 && H<=200\r\n     */\r\n    {\r\n        relevant: function (container) {\r\n            if ((container.pixelWidth <= 200) && (container.pixelHeight <= 200)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        state: function (object, stateId) {\r\n            // Hide legend\r\n            if (object instanceof Legend) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.disabled = true;\r\n                return state;\r\n            }\r\n            if (object instanceof ZoomControl) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.disabled = true;\r\n                return state;\r\n            }\r\n        }\r\n    }\r\n];\r\n//# sourceMappingURL=ResponsiveDefaults.js.map"],"sourceRoot":""}